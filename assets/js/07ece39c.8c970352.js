"use strict";(self.webpackChunksynth_docs=self.webpackChunksynth_docs||[]).push([[5138],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=i,f=d["".concat(s,".").concat(u)]||d[u]||p[u]||a;return n?r.createElement(f,o(o({ref:t},m),{},{components:n})):r.createElement(f,o({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6190:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return m},default:function(){return d}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],l={id:"command-line",title:"Command-line"},s=void 0,c={unversionedId:"docs/getting_started/command-line",id:"docs/getting_started/command-line",isDocsHomePage:!1,title:"Command-line",description:"synth is a Unix-y command line tool wrapped around the core synthetic data engine.",source:"@site/docs/docs/getting_started/cli.md",sourceDirName:"docs/getting_started",slug:"/docs/getting_started/command-line",permalink:"/docs/getting_started/command-line",editUrl:"https://github.com/getsynth/synth/edit/master/docs/docs/docs/getting_started/cli.md",tags:[],version:"current",frontMatter:{id:"command-line",title:"Command-line"},sidebar:"docsSidebar",previous:{title:"Schema",permalink:"/docs/getting_started/schema"},next:{title:"How it works",permalink:"/docs/getting_started/how-it-works"}},m=[{value:"Usage",id:"usage",children:[{value:"Command: import",id:"command-import",children:[]},{value:"Command: generate",id:"command-generate",children:[]}]}],p={toc:m};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"synth")," is a Unix-y command line tool wrapped around the core synthetic data engine. "),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"command-import"},"Command: import"),(0,a.kt)("p",null,"Usage: ",(0,a.kt)("inlineCode",{parentName:"p"},"synth import [OPTIONS] <namespace>")),(0,a.kt)("p",null,"Synth can create schema files from different data sources using the ",(0,a.kt)("inlineCode",{parentName:"p"},"synth import")," command.\nAccidentally running ",(0,a.kt)("inlineCode",{parentName:"p"},"synth import")," on an existing directory is safe - the operation will fail."),(0,a.kt)("p",null,"If a subdirectory for a given namespace does not exist, Synth will create it."),(0,a.kt)("h4",{id:"argument"},"Argument"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"<namespace>")," - The path to the namespace directory into which to save schema files. The directory will be created by ",(0,a.kt)("inlineCode",{parentName:"li"},"synth"),".")),(0,a.kt)("h4",{id:"options"},"Options"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"--from <from>")," - The location from which to import. Synth supports multiple import strategies. "),(0,a.kt)("p",{parentName:"li"},"Importing from a file: Currently we support importing from JSON files by specifying the path to\nthe file: ",(0,a.kt)("inlineCode",{parentName:"p"},"/some/path/to/file.json"),"."),(0,a.kt)("p",{parentName:"li"},"Importing from standard input: Not specifying ",(0,a.kt)("inlineCode",{parentName:"p"},"from")," will accept JSON files from stdin."),(0,a.kt)("p",{parentName:"li"},"Importing from a database (e.g.\npostgres): ",(0,a.kt)("inlineCode",{parentName:"p"},"synth import tpch --from postgres://user:pass@localhost:5432/tpch")))),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"command-generate"},"Command: generate"),(0,a.kt)("p",null,"Usage: ",(0,a.kt)("inlineCode",{parentName:"p"},"synth generate [OPTIONS] <namespace>")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"synth generate")," command will generate data from a collection of schema files."),(0,a.kt)("p",null,"If there is a misconfiguration in your schema (for example referring to a field that does not exist), ",(0,a.kt)("inlineCode",{parentName:"p"},"synth generate")," will exit with a non-zero exit code and output an error message to help you understand which part of the schema is misconfigured."),(0,a.kt)("h4",{id:"argument-1"},"Argument"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"<namespace>")," - The path to the namespace directory from which to load schema files.")),(0,a.kt)("h4",{id:"options-1"},"Options"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--collection <collection>")," - Specify a specific collection in a namespace if you don't want to generate data from all collections."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--size <size>")," - The number of elements which should be generated per collection. This number is not guaranteed, it serves as a lower bound."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--to <uri>")," - The generation destination. If unspecified, generation defaults to stdout."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--seed <seed>")," - An unsigned 64 bit integer seed to be used as a seed for generation. Defaults to 0 if unspecified."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"--random")," - A flag which toggles generation with a random seed. This cannot be used with --seed.")))}d.isMDXComponent=!0}}]);