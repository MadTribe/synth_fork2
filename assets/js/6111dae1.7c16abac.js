"use strict";(self.webpackChunksynth_docs=self.webpackChunksynth_docs||[]).push([[7704],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return c}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(t),c=i,h=d["".concat(p,".").concat(c)]||d[c]||m[c]||r;return t?a.createElement(h,l(l({ref:n},u),{},{components:t})):a.createElement(h,l({ref:n},u))}));function c(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7104:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),l=["components"],o={},p=void 0,s={unversionedId:"docs/content/number",id:"docs/content/number",isDocsHomePage:!1,title:"number",description:"Synth's number type allows for generating fixed-width numbers.",source:"@site/docs/docs/content/number.md",sourceDirName:"docs/content",slug:"/docs/content/number",permalink:"/docs/content/number",editUrl:"https://github.com/getsynth/synth/edit/master/docs/docs/docs/content/number.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"bool",permalink:"/docs/content/bool"},next:{title:"string",permalink:"/docs/content/string"}},u=[{value:"Parameters",id:"parameters",children:[]},{value:"Defaults",id:"defaults",children:[]},{value:"range",id:"range",children:[{value:"Parameters",id:"parameters-1",children:[]},{value:"Defaults",id:"defaults-1",children:[]}]},{value:"constant",id:"constant",children:[]},{value:"id",id:"id",children:[]}],m={toc:u};function d(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Synth's ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," type allows for generating fixed-width numbers. "),(0,r.kt)("h3",{id:"parameters"},"Parameters"),(0,r.kt)("h4",{id:"subtype"},(0,r.kt)("inlineCode",{parentName:"h4"},"subtype")),(0,r.kt)("p",null,"All the variants of ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," accept an optional ",(0,r.kt)("inlineCode",{parentName:"p"},'"subtype"')," field to specify\nthe width and primitive kind of the values generated. The value of ",(0,r.kt)("inlineCode",{parentName:"p"},'"subtype"'),",\nif specified, must be one of ",(0,r.kt)("inlineCode",{parentName:"p"},"u64"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"i64"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"f64"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"u32"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"i32"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"f32"),"."),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "number",\n  "subtype": "u32",\n  "constant": 42\n}\n')),(0,r.kt)("p",null,"It is not required to specify the ",(0,r.kt)("inlineCode",{parentName:"p"},'"subtype"')," field: ",(0,r.kt)("inlineCode",{parentName:"p"},"synth")," will try to infer\nthe best value based on the value of other parameters. But it may be necessary\nto set it manually in situations where the data sink only accepts certain\nwidths (e.g. postgres)."),(0,r.kt)("h3",{id:"defaults"},"Defaults"),(0,r.kt)("p",null,"If no variant (such as ",(0,r.kt)("inlineCode",{parentName:"p"},"range"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"constant"),", etc.) is specified, ",(0,r.kt)("inlineCode",{parentName:"p"},"number"),"\nwill have different default behavior based on the value of ",(0,r.kt)("inlineCode",{parentName:"p"},'"subtype"'),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"For integer subtypes (",(0,r.kt)("inlineCode",{parentName:"li"},"i32"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"u32"),", etc.): ",(0,r.kt)("inlineCode",{parentName:"li"},"number")," will default to generating one of the integers in the\nrepresentable range of the subtype."),(0,r.kt)("li",{parentName:"ul"},"For float subtypes (",(0,r.kt)("inlineCode",{parentName:"li"},"f32"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"f64"),"): ",(0,r.kt)("inlineCode",{parentName:"li"},"number")," will default to generating from the semi-open interval ",(0,r.kt)("inlineCode",{parentName:"li"},"[0, 1)"),".")),(0,r.kt)("h4",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "number",\n  "subtype": "i32"\n}\n')),(0,r.kt)("h4",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "number",\n  "subtype": "f32"\n}\n')),(0,r.kt)("h2",{id:"range"},"range"),(0,r.kt)("p",null,"Generates numbers of a particular type contained in a specified interval."),(0,r.kt)("h3",{id:"parameters-1"},"Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"low"')," (optional, number): the lower bound of the interval"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"high"')," (optional, number): the upper bound of the interval"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"step"')," (optional, number): force alignment of generated numbers on multiples\nof ",(0,r.kt)("inlineCode",{parentName:"li"},'"step"')," from the value of ",(0,r.kt)("inlineCode",{parentName:"li"},'"low"'),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"include_low"')," (optional, bool): whether to include the specified lower bound\nin the range. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"include_high"')," (optional, bool): whether to include the specified upper\nbound in the range. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,r.kt)("h4",{id:"example-3"},"Example"),(0,r.kt)("p",null,"This generates one of the integers ",(0,r.kt)("inlineCode",{parentName:"p"},"0, 3, 6, 9"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "number",\n  "range": {\n      "low": 0,\n      "high": 10,\n      "step": 3\n  }\n}\n')),(0,r.kt)("h4",{id:"example-4"},"Example"),(0,r.kt)("p",null,"This generates one integer between ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," (included) and ",(0,r.kt)("inlineCode",{parentName:"p"},"122")," (included)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "number",\n  "range": {\n      "high": 122,         // the age of the oldest recorded person\n      "include_high": true      \n  }\n}\n')),(0,r.kt)("h4",{id:"example-5"},"Example"),(0,r.kt)("p",null,"This generates one floating-point number between ",(0,r.kt)("inlineCode",{parentName:"p"},"-273.15")," (included)\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"15000000.0")," (excluded) with an approximate alignment to the second decimal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "number",\n  "range": {\n      "high": 15000000.0, // temperature at sun\'s core in Celcius\n      "low": -273.15,     // 0 Kelvin\n      "step": 0.01\n  }\n}\n')),(0,r.kt)("h3",{id:"defaults-1"},"Defaults"),(0,r.kt)("p",null,"For values of ",(0,r.kt)("inlineCode",{parentName:"p"},'"subtype"')," belonging to the integer class (",(0,r.kt)("inlineCode",{parentName:"p"},"i32"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"u32"),", etc.),\nthe parameters ",(0,r.kt)("inlineCode",{parentName:"p"},'"low"'),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"high"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},'"step"')," default to the following values if\nnot specified explicitly:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"low"'),": the minimum representable integer in the subtype"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"high"'),": the maximum representable integer in the subtype"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"step"'),": the integer ",(0,r.kt)("inlineCode",{parentName:"li"},"1"))),(0,r.kt)("h4",{id:"example-6"},"Example"),(0,r.kt)("p",null,"Not specifying any of ",(0,r.kt)("inlineCode",{parentName:"p"},'"low"'),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"high"')," is equivalent to setting the bounds to\nthe minimum and maximum representable integers in the subtype."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "number",\n  "subtype": "i32",\n  "range": {}\n}\n')),(0,r.kt)("p",null,"For values of ",(0,r.kt)("inlineCode",{parentName:"p"},'"subtype"')," belonging to the float class (",(0,r.kt)("inlineCode",{parentName:"p"},"f32"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"f64"),", etc.), the\nparameters ",(0,r.kt)("inlineCode",{parentName:"p"},'"low"'),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"high"')," default to the following values if not specified\nexplicitly:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"low"'),": the floating-point number ",(0,r.kt)("inlineCode",{parentName:"li"},"0.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'"high"'),": the floating-point number ",(0,r.kt)("inlineCode",{parentName:"li"},"1."))),(0,r.kt)("h2",{id:"constant"},"constant"),(0,r.kt)("p",null,"A constant number type. This will always evaluate to the same number."),(0,r.kt)("h4",{id:"example-7"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "number",\n  "constant": 3.14159  // pi\n}\n')),(0,r.kt)("p",null,"The constant number generator can also be simply declared by its desired output value."),(0,r.kt)("h4",{id:"example-8"},"Example"),(0,r.kt)("p",null,"The schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "object",\n  "just_the_number_42": 42\n}\n')),(0,r.kt)("p",null,"is the same as the longer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "object",\n  "just_the_number_42": {\n    "type": "number",\n    "constant": 42\n  }\n}\n')),(0,r.kt)("h2",{id:"id"},"id"),(0,r.kt)("p",null,"A monotonically increasing number type, most commonly used as a unique row identifier. The optional ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," field\ndefaults to 1 if unspecified."),(0,r.kt)("p",null,"Synth currently supports ",(0,r.kt)("inlineCode",{parentName:"p"},"u64")," ids."),(0,r.kt)("h4",{id:"example-9"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "array",\n  "length": {\n    "type": "number",\n    "constant": 5\n  },\n  "content": {\n    "type": "number",\n    "id": {\n      "start_at": 10\n    }\n  }\n}\n')))}d.isMDXComponent=!0}}]);