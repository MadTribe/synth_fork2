"use strict";(self.webpackChunksynth_docs=self.webpackChunksynth_docs||[]).push([[148],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=p(t),d=a,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(f,s(s({ref:n},l),{},{components:t})):r.createElement(f,s({ref:n},l))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8298:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return l},default:function(){return m}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),s=["components"],i={title:"same_as"},c=void 0,p={unversionedId:"docs/content/same-as",id:"docs/content/same-as",isDocsHomePage:!1,title:"same_as",description:"Synth's same_as generator type establishes a relation between two generators. It lets you re-use a value generated at",source:"@site/docs/docs/content/same-as.md",sourceDirName:"docs/content",slug:"/docs/content/same-as",permalink:"/docs/content/same-as",editUrl:"https://github.com/getsynth/synth/edit/master/docs/docs/docs/content/same-as.md",tags:[],version:"current",frontMatter:{title:"same_as"},sidebar:"docsSidebar",previous:{title:"one_of",permalink:"/docs/content/one-of"},next:{title:"unique",permalink:"/docs/content/unique"}},l=[],u={toc:l};function m(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Synth's ",(0,o.kt)("inlineCode",{parentName:"p"},"same_as")," generator type establishes a relation between two generators. It lets you re-use a value generated at\na different level in say, an ",(0,o.kt)("a",{parentName:"p",href:"object"},(0,o.kt)("inlineCode",{parentName:"a"},"object")),", at a different level in the same object. It is often\nused to specify foreign key relationships in complex datasets."),(0,o.kt)("h4",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "object",\n  "name": {\n    "type": "string",\n    "faker": {\n      "generator": "first_name"\n    }\n  },\n  "same_name": {\n    "type": "same_as",\n    "ref": "name"\n  }\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},'"ref"')," field must point to another existing field. Complex objects can be traversed by concatenating levels\nwith a period ",(0,o.kt)("inlineCode",{parentName:"p"},"."),"."),(0,o.kt)("h4",{id:"example-1"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "object",\n  "address": {\n    "type": "object",\n    "street_name": {\n      "type": "string",\n      "faker": {\n        "generator": "street_name"\n      }\n    },\n    "zip_code": {\n      "type": "string",\n      "faker": {\n        "generator": "zip_code"\n      }\n    }\n  },\n  "same_zip_code": {\n    "type": "same_as",\n    "ref": "address.zip_code"\n  }\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"same_as")," generator can also be simply declared by the value of the ",(0,o.kt)("inlineCode",{parentName:"p"},'"ref"')," field prefixed with ",(0,o.kt)("inlineCode",{parentName:"p"},"@"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "object",\n  "address": {\n    "type": "object",\n    "street_name": {\n      "type": "string",\n      "faker": {\n        "generator": "street_name"\n      }\n    },\n    "zip_code": {\n      "type": "string",\n      "faker": {\n        "generator": "zip_code"\n      }\n    }\n  },\n  "same_zip_code": "@address.zip_code"\n}\n')))}m.isMDXComponent=!0}}]);