"use strict";(self.webpackChunksynth_docs=self.webpackChunksynth_docs||[]).push([[8947],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=o.createContext({}),l=function(e){var t=o.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(u.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),p=a,m=d["".concat(u,".").concat(p)]||d[p]||h[p]||i;return n?o.createElement(m,r(r({ref:t},c),{},{components:n})):o.createElement(m,r({ref:t},c))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var l=2;l<i;l++)r[l]=n[l];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},549:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return l},assets:function(){return c},toc:function(){return h},default:function(){return p}});var o=n(7462),a=n(3366),i=(n(7294),n(3905)),r=["components"],s={title:"Building a startup with Rust",author:"Christos Hadjiaslanis",author_title:"Founder",author_url:"https://github.com/getsynth",author_image_url:"https://avatars.githubusercontent.com/u/14791384?s=460&v=4",tags:["rust","startup"],description:"This blog post is a compilation of thoughts around building a company with Rust",image:"https://storage.googleapis.com/getsynth-public/media/rust.jpeg",hide_table_of_contents:!1},u=void 0,l={permalink:"/blog/2021/10/07/building-a-startup-with-rust",source:"@site/blog/2021-10-07-building-a-startup-with-rust.md",title:"Building a startup with Rust",description:"This blog post is a compilation of thoughts around building a company with Rust",date:"2021-10-07T00:00:00.000Z",formattedDate:"October 7, 2021",tags:[{label:"rust",permalink:"/blog/tags/rust"},{label:"startup",permalink:"/blog/tags/startup"}],readingTime:7.325,truncated:!1,authors:[{name:"Christos Hadjiaslanis",title:"Founder",url:"https://github.com/getsynth",imageURL:"https://avatars.githubusercontent.com/u/14791384?s=460&v=4"}],nextItem:{title:"50 ways to crash our product",permalink:"/blog/2021/09/27/crash"}},c={authorsImageUrls:[void 0]},h=[{value:"Development Velocity",id:"development-velocity",children:[]},{value:"Correctness",id:"correctness",children:[]},{value:"Talent",id:"talent",children:[]},{value:"Open Source",id:"open-source",children:[]},{value:"Libraries",id:"libraries",children:[]},{value:"Should you build your startup with Rust?",id:"should-you-build-your-startup-with-rust",children:[]}],d={toc:h};function p(e){var t=e.components,s=(0,a.Z)(e,r);return(0,i.kt)("wrapper",(0,o.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Rust",src:n(7021).Z})),(0,i.kt)("p",null,"When building a company you are setting out to fundamentally solve a problem.\nFor this reason, engineers have been systematically attracted by this romantic\nidea of changing the world with your brain and a laptop. We are at heart problem\nsolvers."),(0,i.kt)("p",null,"As engineers, we can (and most of us have) become zealous at times about our\nsolutions to these problems. We have pragmatists who just get stuff done - they\naddress the symptom fast and effectively. We have idealists who will grind at an\nelegant scalable solution and try to treat the disease. Whichever camp you\nsubscribe to, at a certain point you need to form an opinion about which\ntechnologies you are going to use to solve the problems you see in the world -\nand this opinion will inevitably cause contention."),(0,i.kt)("p",null,"Conventional wisdom is to 'use the right tool for the job'. The choice of\nprogramming language for example, depends on the domain of the problem you are\ntrying to solve. If you're implementing some algorithm, in a secluded project,\nit's easy to make the case about what the language for the job may be. You can\nrun a benchmark and literally test the execution time for each candidate\nlanguage (if you're optimising for execution time). You can persuade yourself\nyou've made a rational and 'objectively correct' decision."),(0,i.kt)("p",null,"However, in the context of building a business, your optimisation function is a\nhigh-dimensional mess involving performance, development velocity, hiring,\nserver costs, ecosystem, tooling, support, licenses etc. You can assign weights\nto what is most important for your business, but at the end of the day the\ndecision is inevitably qualitative."),(0,i.kt)("p",null,"At Synth, we're working on building the best data generator in the world. We\nmade a conscious decision to use Rust for our main line of products. After more\nthan a year of building I've had the opportunity to see Rust at its best and\nworst in the context of starting a company - this post is a compilation of\nthese (at times cynical) thoughts."),(0,i.kt)("h2",{id:"development-velocity"},"Development Velocity"),(0,i.kt)("p",null,"Rust has a ",(0,i.kt)("em",{parentName:"p"},"really")," steep learning curve. Coming from an OO background it took\nme ",(0,i.kt)("em",{parentName:"p"},"months")," to become productive in Rust. This was incredibly frustrating for me\nas I felt that my lack of productivity was impacting the team, which it was.\nEven when you eventually do become productive (and you will), Rust forces you to\nreally think deeply about what you're doing and things inevitably take longer to\nget over the line. A poorly thought out design decision today can come back to\nhaunt you months later. What should be a simple change or refactor can end up\nresulting in complete tear down as you try to appease the borrow checker. This\nis deadly."),(0,i.kt)("p",null,"The entire premise of a startup is that ",(0,i.kt)("em",{parentName:"p"},"you have to iterate rapidly"),". Very few\ncompanies know what they should be building from day one. It's an iterative\nprocess involving a feedback loop of talking to users and making changes to\nreflect the feedback. The faster you can make that feedback loop, the higher\nprobability you have of success."),(0,i.kt)("h2",{id:"correctness"},"Correctness"),(0,i.kt)("p",null,"The evident hit in development velocity is redeemed to an extent by Rust's\nemphasis on writing correct programs. \"if it compiles it works' so to speak.\nI've found this to be true for the most part while building with Rust and it is\nan absolute joy to work with for this reason."),(0,i.kt)("p",null,"Even if your program is not perfect, you understand the failure modes much\nbetter. The set of unknown failure modes is reduced substantially as your\nprogram breaks in exactly the way you expect it to. The lack of null pointers in\nconjunction with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Result")," paradigm (vs say, exceptions) compels you to build\ncorrect programs where edge cases are well understood and are handled explicitly\nby you (or ",(0,i.kt)("inlineCode",{parentName:"p"},"unimplemented!")," but no one is perfect)."),(0,i.kt)("p",null,"If you've reached product market fit - correctness may counteract the\ndevelopment velocity hit. When you know what you're building you need to iterate\nless. Your dev team is also going to be spending less time dealing with bugs as\nyou've already dealt with that while trying to appease the compiler."),(0,i.kt)("p",null,"If it compiles it works - and this is an invaluable asset when you're\naggressively shipping code."),(0,i.kt)("h2",{id:"talent"},"Talent"),(0,i.kt)("p",null,"Getting great talent is unbelievably imortant for an early stage startup. The\nfact that the absolute number of competent and experienced Rust developers is so\nsmall initially seems detrimental to getting great people. This is exacerbated\nby Rust's steep learning curve as you need to hire someone with experience, or\nit's going to take months for them to become productive. However, this is not\nthe full picture."),(0,i.kt)("p",null,"In our experience the competence of your average Rust developer is much higher\nthan more conventional programming languages. Something spoke to these\nindividuals when they picked up Rust, and it's hard to put your finger on it but\nit's that same quality that makes a great engineer. It's also been a pleasant\nsurprise to find out that really good engineers will seek you out as an\nemployer ",(0,i.kt)("em",{parentName:"p"},"because you use Rust"),". They don't want to work in *script or Java or\nC++. They want to work with Rust because it's great."),(0,i.kt)("h2",{id:"open-source"},"Open Source"),(0,i.kt)("p",null,"At Synth, we've chosen to adopt an open-core business model. The idea behind an\nopen-core business is you develop and open source product with a permissive\nlicense which solves a real ",(0,i.kt)("em",{parentName:"p"},"technical")," problem. You work on building a user\nbase, a community and a great product all out in the open. You then structure\nyour business model around solving the corresponding ",(0,i.kt)("em",{parentName:"p"},"organisational")," problem -\nand that's how you make money."),(0,i.kt)("p",null,"We've been really lucky to have a really active set of contributors - giving\nideas, reporting bugs and contributing (at times very significant) code. It is\nhard to know for sure, but we have a strong hunch that a lot of the contributors\nare active because they have an interest in Rust projects specifically. A lot of\nour contributors are also interested in learning Rust - not necessarily being\nveterans of the language. This has worked out great as the more experienced\nmembers of our core team mentor and review code of young rustaceans, building a\nsymbiotic positive feedback loop."),(0,i.kt)("p",null,"Thank you to all our contributors - you know who you are and you guys are\namazing."),(0,i.kt)("h2",{id:"libraries"},"Libraries"),(0,i.kt)("p",null,"Rust has an ecosystem of incredibly high quality libraries. The Rust core team\nhas led by example and focused on a high quality and tight standard\nlibrary. The result of a highly focused standard library is (unfortunately) a\nlack of canonical libraries for doing things outside the standard library. So\nyou want a webserver, pick from one of the 100s available. You want a crate (\nRust lingo for library) for working with JWT tokens? Here's 9, pick one. I mean,\neven something as fundamental as an asynchronous runtime is split\nbetween ",(0,i.kt)("inlineCode",{parentName:"p"},"tokio")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"async-std")," and others. As a young rustacean this can\nbe overwhelming."),(0,i.kt)("p",null,"What ends up happening over time is certain libraries become implicitly\ncanonical as they receive overwhelming support and start becoming serious\ndependencies differentiating from their alternatives. Also in a project\nupdate from  RustConf 2021 it ",(0,i.kt)("a",{parentName:"p",href:"https://youtu.be/ylOpCXI2EMM?t=1048"},"was mentioned")," that the idea of having 'recommended crates' may be visited in the\nfuture. "),(0,i.kt)("p",null,"The lack of canonical non-standard libraries is an issue when you're getting\nstarted - but over time this diminishes as you get a better understanding of the\necosystem. What ",(0,i.kt)("em",{parentName:"p"},"has")," been constantly detrimental to our development velocity\nhas been the lack of ",(0,i.kt)("em",{parentName:"p"},"client")," libraries for Rust. We've had to write a\nbunch of different integrations ourselves but they're often clunky as we\ndon't  have the time to invest in making them really high quality. For\nexample most of Google's products have at best an unofficial code-generated\ncrate maintained by the community, and at worst absolutely nothing. You\nneed to write it from scratch."),(0,i.kt)("h2",{id:"should-you-build-your-startup-with-rust"},"Should you build your startup with Rust?"),(0,i.kt)("p",null,"Well it depends. Assuming you're building a product in the right domain for\nRust (say a CLI as opposed to a social media site), even then the answer is not\nclear cut. If you don't have close to 100% conviction that you know what you're\nbuilding, I would be inclined to say no. Development velocity and being able to\nmake rapid iterations is so important for an early stage startup that it\noutweighs a lot of the benefits that Rust brings to the table."),(0,i.kt)("p",null,"If your company is later stage, and you know understand exactly what you should\nbe building (assuming this is every the case) then I would say yes. The\n'correctness' of Rust programs and the propensity of Rust to attract great\nengineers can help in building a great engineering culture and a great company."))}p.isMDXComponent=!0},7021:function(e,t,n){t.Z=n.p+"assets/images/rust-fd0d58361c7a18b1e0c845211d1bdf27.jpeg"}}]);