"use strict";(self.webpackChunksynth_docs=self.webpackChunksynth_docs||[]).push([[9057],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=p(n),c=o,u=h["".concat(l,".").concat(c)]||h[c]||m[c]||i;return n?a.createElement(u,r(r({ref:t},d),{},{components:n})):a.createElement(u,r({ref:t},d))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1443:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},assets:function(){return d},toc:function(){return m},default:function(){return c}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],s={title:"Seeding test databases in 2021 - best practices",author_url:"https://github.com/brokad/",author:"Damien B. (@brokad)",author_image_url:"https://avatars.githubusercontent.com/u/13315034?v=4",tags:["postgres","test data","data generation","tutorial","beginners guide","seeding","prisma","schema","data model","orm"],description:"In this tutorial, we'll learn how to design a Prisma data model for a basic message board and how to seed test databases with mock data using open-source tools.",image:"https://storage.googleapis.com/getsynth-public/media/orm_small.jpg",hide_table_of_contents:!1},l=void 0,p={permalink:"/blog/2021/08/31/seeding-databases-tutorial",source:"@site/blog/2021-08-31-seeding-databases-tutorial.md",title:"Seeding test databases in 2021 - best practices",description:"In this tutorial, we'll learn how to design a Prisma data model for a basic message board and how to seed test databases with mock data using open-source tools.",date:"2021-08-31T00:00:00.000Z",formattedDate:"August 31, 2021",tags:[{label:"postgres",permalink:"/blog/tags/postgres"},{label:"test data",permalink:"/blog/tags/test-data"},{label:"data generation",permalink:"/blog/tags/data-generation"},{label:"tutorial",permalink:"/blog/tags/tutorial"},{label:"beginners guide",permalink:"/blog/tags/beginners-guide"},{label:"seeding",permalink:"/blog/tags/seeding"},{label:"prisma",permalink:"/blog/tags/prisma"},{label:"schema",permalink:"/blog/tags/schema"},{label:"data model",permalink:"/blog/tags/data-model"},{label:"orm",permalink:"/blog/tags/orm"}],readingTime:18.135,truncated:!1,authors:[{name:"Damien B. (@brokad)",url:"https://github.com/brokad/",imageURL:"https://avatars.githubusercontent.com/u/13315034?v=4"}],prevItem:{title:"So you want to mock an API",permalink:"/blog/2021/09/07/mocking-a-production-api"},nextItem:{title:"Complex Procedural Rust Macros",permalink:"/blog/2021/08/09/macro"}},d={authorsImageUrls:[void 0]},m=[{value:"Data modeling is not boring",id:"data-modeling-is-not-boring",children:[{value:"What is a data model?",id:"what-is-a-data-model",children:[]},{value:"Why do I need a data model?",id:"why-do-i-need-a-data-model",children:[]},{value:"Prisma is awesome",id:"prisma-is-awesome",children:[]}]},{value:"The secret to writing good code",id:"the-secret-to-writing-good-code",children:[{value:"Testing, testing and more testing",id:"testing-testing-and-more-testing",children:[]}]},{value:"Generate data for your data model",id:"generate-data-for-your-data-model",children:[{value:"Installing <code>synth</code>",id:"installing-synth",children:[]},{value:"Synth schema",id:"synth-schema",children:[]},{value:"Collections",id:"collections",children:[]},{value:"Schema nodes",id:"schema-nodes",children:[]},{value:"Generating ids",id:"generating-ids",children:[]},{value:"Generating emails",id:"generating-emails",children:[]},{value:"Generating objects",id:"generating-objects",children:[]},{value:"Leverage the docs",id:"leverage-the-docs",children:[]},{value:"Making sure our constraints are satisfied",id:"making-sure-our-constraints-are-satisfied",children:[]},{value:"How to deal with relations",id:"how-to-deal-with-relations",children:[]},{value:"Synth generate",id:"synth-generate",children:[]}]},{value:"What&#39;s next",id:"whats-next",children:[]}],h={toc:m};function c(e){var t=e.components,s=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Seeding test databases in 2021 - best practices",src:n(9548).Z})),(0,i.kt)("p",null,"In this tutorial, we'll learn how to design\nthe ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/concepts/components/prisma-schema"},"Prisma data model")," for a basic message board and how to seed\ndatabases with the open-source tool ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/getsynth/synth"},(0,i.kt)("inlineCode",{parentName:"a"},"synth"))," and generate mock data to\ntest our code."),(0,i.kt)("p",null,"The code for the example we are working with here can be accessed in\nthe ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/getsynth/synth/tree/master/examples/message_board"},"examples repository on GitHub"),"."),(0,i.kt)("h2",{id:"data-modeling-is-not-boring"},"Data modeling is not boring"),(0,i.kt)("h3",{id:"what-is-a-data-model"},"What is a data model?"),(0,i.kt)("p",null,"Data modeling (in the context of databases and this tutorial) refers to the\npractice of formalizing a collection of entities, their properties and relations\nbetween one another. It is an almost mathematical process (borrowing a lot of\nlanguage from ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Set_theory"},"set theory"),") but that should not scare you. When it\ncomes down to it, it is exceedingly simple and quickly becomes more of an art\nthan a science."),(0,i.kt)("p",null,"The crux of the problem of data modeling is to summarize and write down what\nconstitutes useful entities and how they relate to one another in a graph of\nconnections."),(0,i.kt)("p",null,"You may wonder what constitutes a ",(0,i.kt)("em",{parentName:"p"},"useful")," entity. It is indeed the toughest\nquestion to answer. It is very difficult to tackle it without a good combined\nidea of what you are building, the database you are building on top of and what\nthe most common queries, operations and aggregate statistics are. There\nare ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/dataguide/"},"many resources")," out there that will guide you through\nanswering that question. Here we'll start with the beginning: why is it needed?"),(0,i.kt)("h3",{id:"why-do-i-need-a-data-model"},"Why do I need a data model?"),(0,i.kt)("p",null,"Often times, getting the data model of your application right is crucial to its\nperformance. A bad data model for your backend can mean it gets crippled by\nseemingly innocuous tasks. On the other hand, a good grasp on data modeling will\nmake your life as a developer 1000 times easier. A good data model is not a\nsource of constant pain, letting you develop and expand without slowing you\ndown. It just is one of those things that pays out compounding returns."),(0,i.kt)("p",null,"Plus, there are nowadays many open-source tools that make building applications\non top of data models really enjoyable. One of them is Prisma."),(0,i.kt)("h3",{id:"prisma-is-awesome"},"Prisma is awesome"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/"},"Prisma")," is an ORM, an ",(0,i.kt)("em",{parentName:"p"},"object relational mapping"),". It is a powerful\nframework that lets you specify your data model using a database agnostic domain\nspecific language (called the ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/concepts/components/prisma-schema"},"Prisma schema"),"). It\nuses ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/concepts/components/prisma-schema/generators"},"pluggable generators")," to build a nice javascript API and\n",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/typescript-from-scratch.html"},"typescript")," bindings for your data model. Hook that up to your IDE\nand you get amazing code completion that is tailored to your data model, in\naddition to a powerful query engine."),(0,i.kt)("p",null,"Let's walk through a example. We want to get a sense for what it'll take to\ndesign the data model for a simple message board a little like ",(0,i.kt)("a",{parentName:"p",href:"https://www.reddit.com/"},"Reddit"),"\nor ",(0,i.kt)("a",{parentName:"p",href:"https://news.ycombinator.com/"},"YCombinator's Hacker News"),". At the very minimum, we want to\nhave a concept of ",(0,i.kt)("em",{parentName:"p"},"users"),": people should be able to register for an account.\nBeyond that, we need a concept of ",(0,i.kt)("em",{parentName:"p"},"posts"),": some structure, attached to users,\nthat holds the content they publish."),(0,i.kt)("p",null,"Using the ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/concepts/components/prisma-schema"},"Prisma schema")," language, which is very expressive even\nif you haven't seen it before, our first go at writing down a ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," entity\nmight look something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'model User {\n  objectId  Bytes    @id @map("_id")\n  id        Int      @unique @default(autoincrement())\n  createdAt DateTime @default(now())\n  email     String   @unique\n  nickname  String\n  posts     Post[]\n}\n')),(0,i.kt)("p",null,"In other words, our ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," entity has properties ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," (a database internal\nunique identifier), ",(0,i.kt)("inlineCode",{parentName:"p"},"createdAt")," (a timestamp, defaulting to now if not\nspecified, that marks the creation time of the user's account), ",(0,i.kt)("inlineCode",{parentName:"p"},"email")," (the\nuser-specified email address, given on registration) which is required to be\nunique (no two users can share an email address) and ",(0,i.kt)("inlineCode",{parentName:"p"},"nickname")," (the user\nspecified display name, given on registration)."),(0,i.kt)("p",null,"In addition, it has a property ",(0,i.kt)("inlineCode",{parentName:"p"},"posts")," which links a user with its posts through\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"Post")," entity. We may come up with something like this for the ",(0,i.kt)("inlineCode",{parentName:"p"},"Post"),"\nentity:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'model Post {\n  objectId  Bytes    @id @map("_id")\n  id        Int      @unique @default(autoincrement())\n  postedAt  DateTime @default(now())\n  title     String\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n}\n')),(0,i.kt)("p",null,"In other words, our ",(0,i.kt)("inlineCode",{parentName:"p"},"Post")," entity has properties ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," (a database internal\nunique identifier); ",(0,i.kt)("inlineCode",{parentName:"p"},"postedAt")," (a timestamp, defaulting to now if not specified,\nthat marks the time at which the user created the post and published it)\n; ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," (the title of the post); ",(0,i.kt)("inlineCode",{parentName:"p"},"author")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"authorId")," which specify a\none-to-many relationship between users and posts."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You may have noticed that the ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Post")," models have an attribute which\nwe haven't mentioned. The ",(0,i.kt)("inlineCode",{parentName:"p"},"objectId")," property is\nan ",(0,i.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/reference/method/ObjectId/"},"internal unique identifier")," used by ",(0,i.kt)("a",{parentName:"p",href:"https://www.mongodb.com/"},"mongoDB"),"\n(the database we're choosing to implement our data model on in this tutorial)."))),(0,i.kt)("p",null,"Let's look closer at these last two properties ",(0,i.kt)("inlineCode",{parentName:"p"},"author")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"authorId"),". There is\na significant difference between them with respect to how they are implemented\nin the database. Remember that, at the end of the day, our data model will need\nto be realized into a database. Because we're using ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/"},"Prisma"),", a lot of\nthese details are abstracted away from us. In this case,\nthe ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/concepts/components/prisma-schema/generators"},"prisma code-generator")," will handle ",(0,i.kt)("inlineCode",{parentName:"p"},"author")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"authorId"),"\nslightly differently."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@relation(...)")," attribute on the ",(0,i.kt)("inlineCode",{parentName:"p"},"author")," property is ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/"},"Prisma"),"'s\nway of declaring that ",(0,i.kt)("inlineCode",{parentName:"p"},"authorId")," is a ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Foreign_key"},"foreign key")," field. Because\nthe type of the ",(0,i.kt)("inlineCode",{parentName:"p"},"author")," property is a ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," entity, ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/"},"Prisma"),"\nunderstands that posts are linked to users via\nthe ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Foreign_key"},"foreign key")," ",(0,i.kt)("inlineCode",{parentName:"p"},"authorId")," which maps to the user's ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", the\nassociated ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Primary_key"},"primary key"),". This is an example of\na ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/concepts/components/prisma-schema/relations/one-to-one-relations"},"one-to-many relation"),"."),(0,i.kt)("p",null,"How that relation is implemented is left to ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/"},"Prisma")," and depends on the\ndatabase you choose to use. Since we are using ",(0,i.kt)("a",{parentName:"p",href:"https://www.mongodb.com/"},"mongodb")," here, this is\nimplemented by ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/concepts/components/prisma-schema/relations/one-to-many-relations"},"direct object id references"),"."),(0,i.kt)("p",null,"Because our data model encodes the relation between posts and users, looking up\na user's posts is inexpensive. This is the benefit of designing a good data\nmodel for an application: operations you have designed and planned for at this\nstage, are optimized for."),(0,i.kt)("p",null,"To get us started using this ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/"},"Prisma")," data model in an actual\napplication, let's create a new ",(0,i.kt)("inlineCode",{parentName:"p"},"npm")," project in an empty directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm init\n")),(0,i.kt)("p",null,"When prompted to specify the entry point, use ",(0,i.kt)("inlineCode",{parentName:"p"},"src/index.js"),". Install some nice\ntypescript bindings for node with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm install --save-dev @types/node typescript\n")),(0,i.kt)("p",null,"Then you can initialize the typescript compiler with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx tsc --init\n")),(0,i.kt)("p",null,"This creates a ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," file which configures the behavior of the\ntypescript compiler. Create a directory ",(0,i.kt)("inlineCode",{parentName:"p"},"src/")," and add the following ",(0,i.kt)("inlineCode",{parentName:"p"},"index.ts"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import {PrismaClient} from '@prisma/client'\n\nconst prisma = new PrismaClient()\n\nconst main = async () => {\n    const user = await prisma.user.findFirst()\n    if (user === null) {\n        throw Error(\"No user data.\")\n    }\n    console.log(`found username: ${user.nickname}`)\n    process.exit(0)\n}\n\nmain().catch((e) => {\n    console.error(e)\n    process.exit(1)\n})\n")),(0,i.kt)("p",null,"Then create a ",(0,i.kt)("inlineCode",{parentName:"p"},"prisma/")," directory and add a ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.prisma")," file containing\nthe Prisma code for the two entities ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Post"),". "),(0,i.kt)("p",null,"Finally, to our ",(0,i.kt)("inlineCode",{parentName:"p"},"schema.prisma")," file, we need to add configuration for our local\ndev database and the generation of the client:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'datasource db {\n  provider = "mongodb"\n  url      = "mongodb://localhost:27017/board"\n}\n\ngenerator client {\n  provider = "prisma-client-js"\n  previewFeatures = ["mongodb"]\n}\n')),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/getsynth/synth/tree/master/examples/message_board/prisma/schema.prisma"},"Head over to the repository"),"\nto see an example of the complete file, including the extra configuration."),(0,i.kt)("p",null,"To build the ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/concepts/components/prisma-schema/generators"},"Prisma client"),", run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx prisma generate\n")),(0,i.kt)("p",null,"Finally, to run it all, edit your ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json")," file (at the root of your\nproject's directory). Look for the ",(0,i.kt)("inlineCode",{parentName:"p"},'"script"')," field and modify the ",(0,i.kt)("inlineCode",{parentName:"p"},'"test"'),"\nscript with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  ...\n  "test": "tsc --project ./ && node ."\n  ... \n}\n')),(0,i.kt)("p",null,"Now all we need is for an instance of ",(0,i.kt)("a",{parentName:"p",href:"https://www.mongodb.com/"},"mongoDB")," to be running while\nwe're working. We can run that straight from the official docker image:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker run -d --name message-board-example -p 27017:27017 --rm mongo\n")),(0,i.kt)("p",null,"To run the example do"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm run test\n\n> message-board-example@1.0.0 test /tmp/message-board-example\n> tsc --project ./ && node .\n\nError: No user data.\n")),(0,i.kt)("p",null,"You should see something close to the output of the snippet: our simple code\nfailed because it is looking for a user that does not exist (yet) in our dev\ndatabase. We will ",(0,i.kt)("a",{parentName:"p",href:"#generate-data-for-your-data-model"},"fix that in a little bit"),"\n. But first, here's a secret."),(0,i.kt)("h2",{id:"the-secret-to-writing-good-code"},"The secret to writing good code"),(0,i.kt)("p",null,"Actually it's no secret at all. It is one of those things that everybody with\nsoftware engineering experience knows. The key to writing good code is learning\nfrom your mistakes!"),(0,i.kt)("p",null,"When coding becomes tedious is when it is hard to learn from errors. Usually\nthis is caused by a lengthy process to go from writing the code to testing it.\nThis can happen for many reasons: having to wait for the deployment of a backend\nin ",(0,i.kt)("inlineCode",{parentName:"p"},"docker compose"),", sitting idly by while your code compiles just to fail at\nthe end because of a typo, the strong integration of a system with components\nexternal to it, and many more."),(0,i.kt)("p",null,"The process that goes from the early stages of designing something to verifying\nits functionalities and rolling it out, that is what is commonly called\nthe ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Systems_development_life_cycle"},"development cycle"),"."),(0,i.kt)("p",null,"It should indeed be a cycle. Once the code is out there, deployed and running,\nit gets reviewed for quality and purpose. More often than not this happens\nbecause users break it and give feedback. The outcome of that gets folded in\nplanning and designing for the next iteration or release.\nThe ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Agile_software_development#Iterative,_incremental,_and_evolutionary"},"agile philosophy")," is built on the idea that this cycle\nshould be as short as possible."),(0,i.kt)("p",null,"So that brings the question: how do you make the development cycle as quick as\npossible? The faster the cycle is, the better your productivity becomes."),(0,i.kt)("h3",{id:"testing-testing-and-more-testing"},"Testing, testing and more testing"),(0,i.kt)("p",null,"One of the keys to shortening a development cycle is making testing easy. When\nplaying with databases and data models, it is something that is often hacky. In\nfact there are very few tools that let you iterate quickly on data models, much\nless ",(0,i.kt)("em",{parentName:"p"},"developer-friendly")," tools."),(0,i.kt)("p",null,"The core issue at hand is that between iterations on ideas and features, we will\nneed to make small and quick changes to our data model. What happens to our\ndatabases and the data in them in that case? Migration is sometimes an option\nbut is notoriously hard and may not work at all if our changes are significant."),(0,i.kt)("p",null,"For development purposes the quickest solution is seeding our new data model\nwith mock data. That way we can test our changes quickly and idiomatically."),(0,i.kt)("h2",{id:"generate-data-for-your-data-model"},"Generate data for your data model"),(0,i.kt)("p",null,"At ",(0,i.kt)("a",{parentName:"p",href:"https://getsynth.com"},"Synth")," we are building a declarative test data generator. It lets\nyou write your data model in plain ",(0,i.kt)("strong",{parentName:"p"},"zero-code")," ",(0,i.kt)("a",{parentName:"p",href:"https://www.json.org/json-en.html"},"JSON")," and seed many\nrelational and non-relational databases with mock data. It is\ncompletely ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/getsynth/synth"},"free and open-source"),"."),(0,i.kt)("p",null,"Let's take our ",(0,i.kt)("a",{parentName:"p",href:"#prisma-is-awesome"},"data model")," and seed a\ndevelopment ",(0,i.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/mongo"},"mongoDB")," database instance with ",(0,i.kt)("a",{parentName:"p",href:"https://getsynth.com"},"Synth"),".\nThen we can make our development cycle very short by using\nan ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/brokad/synth/tree/master/examples/message_board/helpers/db.js"},"npm script"),"\nthat sets it all up for us whenever we need it."),(0,i.kt)("h3",{id:"installing-synth"},"Installing ",(0,i.kt)("inlineCode",{parentName:"h3"},"synth")),(0,i.kt)("p",null,"We'll need the ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting_started/command-line"},(0,i.kt)("inlineCode",{parentName:"a"},"synth"))," command-line tool to get started. From a\nterminal, run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ curl -sSL https://getsynth.com/install | sh\n")),(0,i.kt)("p",null,"This will run you through an install script for the ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Executable"},"binary release"),"\nof ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting_started/command-line"},(0,i.kt)("inlineCode",{parentName:"a"},"synth")),". If you prefer installing from source, we got you: head\non over to the ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting_started/installation"},"Installation"),"\npages of the official documentation."),(0,i.kt)("p",null,"Once the installer script is done, try running"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ synth version\nsynth 0.5.4\n")),(0,i.kt)("p",null,"to make sure everything works. If it doesn't work, add ",(0,i.kt)("inlineCode",{parentName:"p"},"$HOME/.local/bin"),"\nto your ",(0,i.kt)("inlineCode",{parentName:"p"},"$PATH")," environment variable with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ export PATH=$HOME/.local/bin:$PATH\n")),(0,i.kt)("p",null,"and try again."),(0,i.kt)("h3",{id:"synth-schema"},"Synth schema"),(0,i.kt)("p",null,"Just like ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/"},"Prisma")," and its schema DSL, ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting_started/command-line"},(0,i.kt)("inlineCode",{parentName:"a"},"synth"))," lets you\nwrite down your data model with zero code."),(0,i.kt)("p",null,"There is one main difference: the ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting_started/command-line"},(0,i.kt)("inlineCode",{parentName:"a"},"synth"))," schema is aimed at the\ngeneration of data. This means it lets you specify the semantics of your data\nmodel in addition to its entities and relations. The ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting_started/command-line"},(0,i.kt)("inlineCode",{parentName:"a"},"synth"))," schema\nhas an understanding of what an email, a username, an address are; whereas the\nPrisma schema only cares about top-level types (strings, integers, etc)."),(0,i.kt)("p",null,"Let's navigate to the top of our ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/getsynth/synth/tree/master/examples/message_board"},"example project's")," directory\nand create a new directory called ",(0,i.kt)("inlineCode",{parentName:"p"},"synth/")," for storing our ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting_started/command-line"},(0,i.kt)("inlineCode",{parentName:"a"},"synth")),"\nschema files."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 prisma/\n\u251c\u2500\u2500 synth/\n\u2514\u2500\u2500 src/\n")),(0,i.kt)("p",null,"Each file we will put in the ",(0,i.kt)("inlineCode",{parentName:"p"},"synth/")," directory that ends in ",(0,i.kt)("inlineCode",{parentName:"p"},".json")," will be\nopened by ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting_started/command-line"},(0,i.kt)("inlineCode",{parentName:"a"},"synth")),", parsed and interpreted as part of our data\nmodel. The structure of these files is simple: each one represents\na ",(0,i.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/core/databases-and-collections/"},"collection")," in our database."),(0,i.kt)("h3",{id:"collections"},"Collections"),(0,i.kt)("p",null,"A collection is a single JSON schema file, stored in a namespace directory.\nBecause collections are formed of many elements, their ",(0,i.kt)("a",{parentName:"p",href:"https://getsynth.com"},"Synth")," schema\ntype is that of ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/array"},"arrays"),"."),(0,i.kt)("p",null,"To get started, let's create a ",(0,i.kt)("inlineCode",{parentName:"p"},"User.json")," file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"synth/")," directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "array",\n  "length": 1,\n  "content": {\n    "type": "null"\n  }\n}\n')),(0,i.kt)("p",null,"Then run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ synth generate synth/\n{"users":[null]}\n')),(0,i.kt)("p",null,"Let's break this down. Our ",(0,i.kt)("inlineCode",{parentName:"p"},"User.json")," collection schema is a JSON object with\nthree fields. The ",(0,i.kt)("inlineCode",{parentName:"p"},'"type"')," represents the kind of generator we want. As we said\nabove, collections must generate arrays. The ",(0,i.kt)("inlineCode",{parentName:"p"},'"length"')," and ",(0,i.kt)("inlineCode",{parentName:"p"},'"content"'),"\nfields are the parameters we need to specify an ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/array"},"array generator"),".\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},'"length"')," field specifies how many elements the generated array must have.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},'"content"')," specifies from what the elements of the array are generated."),(0,i.kt)("p",null,"For now the value of ",(0,i.kt)("inlineCode",{parentName:"p"},'"content"')," is a generator of the ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," type. Which is why\nour array has ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," as a single element. But we will soon change this."),(0,i.kt)("p",null,"Note that the value of ",(0,i.kt)("inlineCode",{parentName:"p"},'"length"')," can be another generator. Of course, because\nthe length of an array is non-negative number, it cannot be just any generator.\nBut it can be any kind that will generate non-negative numbers. For example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n  "type": "array",\n  "length": {\n    "type": "number",\n    "range": {\n      "low": 5,\n      "high": 10,\n      "step": 1\n    }\n  },\n  "content": {\n    "type": "null"\n  }\n}\n')),(0,i.kt)("p",null,"This now makes our ",(0,i.kt)("inlineCode",{parentName:"p"},"users")," collection variable length. Its length will be\ndecided by the result of generating a new random integer between 5 and 10."),(0,i.kt)("p",null,"If you now run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ synth generate synth/\n{"users":[null,null,null,null,null]}\n')),(0,i.kt)("p",null,"you can see the result of that change."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"By default ",(0,i.kt)("inlineCode",{parentName:"p"},"synth")," fixes the seed of its\ninternal ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Pseudorandom_number_generator"},"PRNG"),". This means that, by default, running ",(0,i.kt)("inlineCode",{parentName:"p"},"synth")," many times\non the same input schemas will give the same output data. If you want to\nrandomize the seed - and thus randomize the result, simply add the\nflag ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting_started/command-line"},(0,i.kt)("inlineCode",{parentName:"a"},"--random")),":"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ synth generate synth/ --random\n{"users":[null,null,null,null,null,null,null]}\n\n$ synth generate synth/ --random\n{"users":[null,null,null,null,null,null,null,null,null]}\n')))),(0,i.kt)("h3",{id:"schema-nodes"},"Schema nodes"),(0,i.kt)("p",null,"Before we can get our ",(0,i.kt)("inlineCode",{parentName:"p"},"users")," collection to match\nour ",(0,i.kt)("a",{parentName:"p",href:"#prisma-is-awesome"},(0,i.kt)("inlineCode",{parentName:"a"},"User")," Prisma model"),", we need to understand how to\ngenerate more kinds of data with ",(0,i.kt)("inlineCode",{parentName:"p"},"synth"),"."),(0,i.kt)("p",null,"Everything that goes into a schema file is a ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting_started/schema"},"schema node"),". Schema\nnodes can be identified by the ",(0,i.kt)("inlineCode",{parentName:"p"},'"type"')," field which specifies which kind of node\nit is. The documentation pages have\na ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/null"},"complete taxonomy of schema nodes")," and their ",(0,i.kt)("inlineCode",{parentName:"p"},'"type"'),"."),(0,i.kt)("h3",{id:"generating-ids"},"Generating ids"),(0,i.kt)("p",null,"Let's look back at our ",(0,i.kt)("a",{parentName:"p",href:"#prisma-is-awesome"},(0,i.kt)("inlineCode",{parentName:"a"},"User")," model"),". It has four\nproperties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"createdAt")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"email")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nickname"))),(0,i.kt)("p",null,"Let's start with ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),". How can we generate that?"),(0,i.kt)("p",null,"The type of the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," property in the ",(0,i.kt)("a",{parentName:"p",href:"#prisma-is-awesome"},(0,i.kt)("inlineCode",{parentName:"a"},"User")," model"),"\nis ",(0,i.kt)("inlineCode",{parentName:"p"},"Int"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"  id        Int      @unique @default(autoincrement())\n")),(0,i.kt)("p",null,"and the attribute indicates that the field is meant to increment sequentially,\ngoing through values 0, 1, 2 etc."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"synth")," schema type for numbers is ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/number"},(0,i.kt)("inlineCode",{parentName:"a"},"number")),".\nWithin ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/number"},(0,i.kt)("inlineCode",{parentName:"a"},"number"))," there are three varieties of generators:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/content/number#range"},(0,i.kt)("inlineCode",{parentName:"a"},"range"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/content/number#constant"},(0,i.kt)("inlineCode",{parentName:"a"},"constant"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/content/number#id"},(0,i.kt)("inlineCode",{parentName:"a"},"id")))),(0,i.kt)("p",null,"What decides the variant is the presence of the ",(0,i.kt)("inlineCode",{parentName:"p"},'"range"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},'"constant"'),"or ",(0,i.kt)("inlineCode",{parentName:"p"},'"id"'),"\nfield in the node's specification."),(0,i.kt)("p",null,"For example, a ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/number#range"},(0,i.kt)("inlineCode",{parentName:"a"},"range"))," variant would look like"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "number",\n    "range": {\n        "low": 5,\n        "high": 10,\n        "step": 1\n    }\n}\n')),(0,i.kt)("p",null,"whereas a ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/number#constant"},(0,i.kt)("inlineCode",{parentName:"a"},"constant"))," variant would look like"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "number",\n    "constant": 42\n}\n')),(0,i.kt)("p",null,"For the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," field we should use the ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/number#id"},(0,i.kt)("inlineCode",{parentName:"a"},"id"))," variant, which is\nauto-incrementing. Here is an example of ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/number#id"},(0,i.kt)("inlineCode",{parentName:"a"},"id"))," used in an array so we\ncan see it behaves as expected:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "array",\n    "length": 10,\n    "content": {\n        "type": "number",\n        "id": {}\n    }\n}\n')),(0,i.kt)("h3",{id:"generating-emails"},"Generating emails"),(0,i.kt)("p",null,"Let us now look at the ",(0,i.kt)("a",{parentName:"p",href:"#prisma-is-awesome"},(0,i.kt)("inlineCode",{parentName:"a"},"email"))," field of\nour ",(0,i.kt)("a",{parentName:"p",href:"#prisma-is-awesome"},(0,i.kt)("inlineCode",{parentName:"a"},"User")," model"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"  email     String   @unique\n")),(0,i.kt)("p",null,"Its type in the data model is that of a ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"synth")," schema type for\nthat is ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/string"},(0,i.kt)("inlineCode",{parentName:"a"},"string")),"."),(0,i.kt)("p",null,"There are many different variants of ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/string"},(0,i.kt)("inlineCode",{parentName:"a"},"string"))," and they are\nall ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/string"},"exhaustively documented"),". The different variants are\nidentified by the presence of a distinguishing field which can be"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"faker"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"pattern"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"uuid"')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/content/string"},"and a lot more"),"...")),(0,i.kt)("p",null,"Since we are interested in generating email addresses, we will be using\nthe ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/string#faker"},(0,i.kt)("inlineCode",{parentName:"a"},'"faker"'))," variant which leverages a preset collection of\ngenerators for common properties like usernames, addresses and emails:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "faker": {\n        "generator": "safe_email"\n    }\n}\n')),(0,i.kt)("h3",{id:"generating-objects"},"Generating objects"),(0,i.kt)("p",null,"OK, so we now know how to generate the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"email")," properties of\nour ",(0,i.kt)("a",{parentName:"p",href:"#prisma-is-awesome"},(0,i.kt)("inlineCode",{parentName:"a"},"User")," model"),". But we do not yet know how to put them\ntogether in one object. For that we need the ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/object"},(0,i.kt)("inlineCode",{parentName:"a"},"object"))," type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "object",\n    "id": {\n        "type": "number",\n        "id": {}\n    },\n    "email": {\n        "type": "string",\n        "faker": {\n            "generator": "safe_email"\n        }\n    }\n}\n')),(0,i.kt)("h3",{id:"leverage-the-docs"},"Leverage the docs"),(0,i.kt)("p",null,"Now we have everything we need to finish writing down\nour ",(0,i.kt)("a",{parentName:"p",href:"#prisma-is-awesome"},(0,i.kt)("inlineCode",{parentName:"a"},"User")," model")," as a ",(0,i.kt)("inlineCode",{parentName:"p"},"synth")," schema. A quick lookup of\nthe ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/string#date_time"},"documentation pages")," will tell us how to generate\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"createdAt")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"nickname")," fields."),(0,i.kt)("p",null,"Here is the finished result for our ",(0,i.kt)("inlineCode",{parentName:"p"},"User.json")," collection:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "array",\n    "length": 3,\n    "content": {\n        "type": "object",\n        "id": {\n            "type": "number",\n            "id": {}\n        },\n        "createdAt": {\n            "type": "string",\n            "date_time": {\n                "format": "%Y-%m-%d %H:%M:%S",\n                "begin": "2020-01-01 12:00:00"\n            }\n        },\n        "email": {\n            "type": "string",\n            "faker": {\n                "generator": "safe_email"\n            }\n        },\n        "nickname": {\n            "type": "string",\n            "faker": {\n                "generator": "username"\n            }\n        }\n    }\n}\n')),(0,i.kt)("h3",{id:"making-sure-our-constraints-are-satisfied"},"Making sure our constraints are satisfied"),(0,i.kt)("p",null,"Looking back at the ",(0,i.kt)("a",{parentName:"p",href:"#prisma-is-awesome"},(0,i.kt)("inlineCode",{parentName:"a"},"User")," model")," we started from, there's\none thing that we did not quite address yet. The ",(0,i.kt)("inlineCode",{parentName:"p"},"email")," field in the Prisma\nschema has the ",(0,i.kt)("inlineCode",{parentName:"p"},"@unique")," attribute:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"  email     String   @unique\n")),(0,i.kt)("p",null,"This means that, in our data model, no two users can share the same email\naddress. Yet, we haven't added that constraint anywhere in\nour ",(0,i.kt)("a",{parentName:"p",href:"#leverage-the-docs"},"final ",(0,i.kt)("inlineCode",{parentName:"a"},"synth")," schema"),"\nfor the ",(0,i.kt)("inlineCode",{parentName:"p"},"User.json")," collection."),(0,i.kt)("p",null,"What we need to use here is ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/modifiers"},(0,i.kt)("inlineCode",{parentName:"a"},"modifiers")),". A modifier is an\nattribute that we can add to any ",(0,i.kt)("inlineCode",{parentName:"p"},"synth")," schema type to modify the way it\nbehaves. There are two modifiers currently supported:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/content/modifiers#optional"},(0,i.kt)("inlineCode",{parentName:"a"},"optional"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/content/modifiers#unique"},(0,i.kt)("inlineCode",{parentName:"a"},"unique")))),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/modifiers#optional"},(0,i.kt)("inlineCode",{parentName:"a"},"optional"))," modifier is an easy way to make a schema node\nrandomly generate something or nothing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "number",\n    "optional": true,\n    "constant": 42\n}\n')),(0,i.kt)("p",null,"Whereas the ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/modifiers#unique"},(0,i.kt)("inlineCode",{parentName:"a"},"unique"))," modifier is an easy way to enforce the\nconstraint that the values generated have no duplication. So all we need to do,\nto represent our data model correctly, is to add the ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/modifiers#unique"},(0,i.kt)("inlineCode",{parentName:"a"},"unique")),"\nmodifier to the ",(0,i.kt)("inlineCode",{parentName:"p"},"email")," field:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"synth",synth:!0},'{\n    "type": "string",\n    "unique": true,\n    "faker": {\n        "generator": "safe_email"\n    }\n}\n')),(0,i.kt)("p",null,"The completed end result for the ",(0,i.kt)("inlineCode",{parentName:"p"},"User.json"),"\ncollection ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/getsynth/synth/tree/master/examples/message_board/synth/User.json"},"can be viewed on GitHub here"),"."),(0,i.kt)("h3",{id:"how-to-deal-with-relations"},"How to deal with relations"),(0,i.kt)("p",null,"Now that we have set up our ",(0,i.kt)("inlineCode",{parentName:"p"},"User.json")," collection, let's turn our attention to\nthe ",(0,i.kt)("a",{parentName:"p",href:"#prisma-is-awesome"},(0,i.kt)("inlineCode",{parentName:"a"},"Post")," model")," and write out the ",(0,i.kt)("inlineCode",{parentName:"p"},"synth")," schema for\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"Post.json")," collection."),(0,i.kt)("p",null,"Here is the end result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "array",\n  "length": 5,\n  "content": {\n    "type": "object",\n    "id": {\n      "type": "number",\n      "id": {}\n    },\n    "postedAt": {\n      "type": "string",\n      "date_time": {\n        "format": "%Y-%m-%d %H:%M:%S",\n        "begin": "2020-01-01 12:00:00"\n      }\n    },\n    "title": {\n      "type": "string",\n      "faker": {\n        "generator": "bs"\n      }\n    },\n    "authorId": "@User.content.id"\n  }\n}\n')),(0,i.kt)("p",null,"It all looks pretty similar to the ",(0,i.kt)("inlineCode",{parentName:"p"},"User.json")," collection, except for one\nimportant difference at the line"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'    "authorId": "@User.content.id"\n')),(0,i.kt)("p",null,"The syntax ",(0,i.kt)("inlineCode",{parentName:"p"},"@...")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"synth"),"'s way of\nspecifying ",(0,i.kt)("a",{parentName:"p",href:"/docs/content/same-as"},"relations between collections"),". Here we are creating\na ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/concepts/components/prisma-schema/relations/one-to-many-relations"},"many-to-1")," relation between the field ",(0,i.kt)("inlineCode",{parentName:"p"},"authorId"),"\nof the ",(0,i.kt)("inlineCode",{parentName:"p"},"Post.json")," collection and the field ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"User.json"),"\ncollection."),(0,i.kt)("p",null,"The final ",(0,i.kt)("inlineCode",{parentName:"p"},"Post.json")," collection\nschema ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/getsynth/synth/tree/master/examples/message_board/synth/Post.json"},"can be viewed on GitHub here"),"."),(0,i.kt)("h3",{id:"synth-generate"},"Synth generate"),(0,i.kt)("p",null,"Now that our data model is implemented in ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting_started/schema"},"Synth"),", we're ready to\nseed our test database with mock data. Here we'll use\nthe ",(0,i.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/mongo"},"offical mongo Docker image"),", but if you are using a\nrelational database like ",(0,i.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/postgres"},"Postgres"),"\nor ",(0,i.kt)("a",{parentName:"p",href:"https://hub.docker.com/_/mysql"},"MySQL"),", you can follow the same process."),(0,i.kt)("p",null,"To start the mongo image in the background (if you haven't done so already), run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker run -d -it -p 27017:27017 --rm mongo\n")),(0,i.kt)("p",null,"Then, to seed the database with ",(0,i.kt)("inlineCode",{parentName:"p"},"synth")," just run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ synth generate synth/ --size 1000 --to mongodb://localhost:27017/board\n")),(0,i.kt)("p",null,"That's it! Our test mongo instance is now seeded with the data of around 100\nusers. ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/getsynth/synth/tree/master/examples/message_board"},"Head over to the examples repository")," to see the complete\nworking example."),(0,i.kt)("h2",{id:"whats-next"},"What's next"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://getsynth.com"},"Synth")," is completely free and built in the open by\nan ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/getsynth/synth#contributors-"},"amazing and fast growing community of contributors"),"."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/getsynth"},"Join us in our mission")," to make test data easy and painless! We\nalso have a very ",(0,i.kt)("a",{parentName:"p",href:"https://discord.com/invite/H33rRDTm3p"},"active Discord server")," where many members of the\ncommunity would be happy to help if you encounter an issue!"))}c.isMDXComponent=!0},9548:function(e,t,n){t.Z=n.p+"assets/images/orm_small-ca76e5e1676897ee856e07ea2e876d43.jpg"}}]);